package ut.edu.project_skincarebooking.controller_for_web;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import ut.edu.project_skincarebooking.models.*;
import ut.edu.project_skincarebooking.services.interF.*;

import jakarta.servlet.http.HttpSession;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;

@Controller
@RequiredArgsConstructor
@RequestMapping("/datlich")
public class AppointmentWebController {

    private final AppointmentService appointmentService;
    private final SkinTherapistService therapistService;
    private final ServiceService serviceService;
    private final CustomerService customerService;

    // Hi·ªÉn th·ªã form ƒë·∫∑t l·ªãch
    @GetMapping
    public String showBookingForm() {
        return "datlich";
    }

    // X·ª≠ l√Ω ƒë·∫∑t l·ªãch
    @PostMapping("/create")
    public String createAppointment(@RequestParam("name") String name,
                                    @RequestParam("phone") String phone,
                                    @RequestParam("address") String address,
                                    @RequestParam("services") List<Long> serviceIds,
                                    @RequestParam("specialist") String specialistCode,
                                    @RequestParam("date") String dateStr,
                                    @RequestParam("time") String timeStr,
                                    HttpSession session) {

        Long customerId = (Long) session.getAttribute("customerId");
        if (customerId == null) {
            System.out.println("üö´ Kh√¥ng c√≥ customerId trong session ‚Üí redirect login");
            return "redirect:/login";
        }

        Customer customer;
        try {
            customer = customerService.getCustomerById(customerId);
        } catch (Exception e) {
            System.out.println("üö´ Kh√¥ng t√¨m th·∫•y customer t·ª´ ID ‚Üí redirect login");
            return "redirect:/login";
        }

        if (customer.getName() == null || customer.getName().isEmpty()) {
            customer.setName(name);
            customerService.saveCustomer(customer);
        }

        // L·∫•y danh s√°ch d·ªãch v·ª•
        List<ServiceEntity> selectedServices = new ArrayList<>();
        for (Long serviceId : serviceIds) {
            ServiceEntity service = serviceService.getServiceById(serviceId);
            if (service != null) {
                selectedServices.add(service);
            }
        }

        if (selectedServices.isEmpty()) {
            return "redirect:/datlich"; // Kh√¥ng c√≥ d·ªãch v·ª• n√†o h·ª£p l·ªá
        }

        // L·∫•y chuy√™n vi√™n
        SkinTherapist therapist;
        if ("khong_chon_chuyen_vien".equals(specialistCode) || specialistCode.isEmpty()) {
            List<SkinTherapist> allTherapists = therapistService.getAllTherapists();
            therapist = allTherapists.get(new Random().nextInt(allTherapists.size()));
        } else {
            Long therapistId = Long.parseLong(specialistCode);
            therapist = therapistService.getTherapistById(therapistId);
        }

        // Chu·∫©n h√≥a th·ªùi gian
        if (timeStr.length() == 5) {
            timeStr += ":00";
        }

        // T·∫°o l·ªãch h·∫πn
        Appointment appointment = new Appointment();
        appointment.setCustomerName(name);
        appointment.setCustomer(customer);
        appointment.setTherapist(therapist);
        appointment.setDate(LocalDate.parse(dateStr));
        appointment.setTime(LocalTime.parse(timeStr));
        appointment.setStatus("Unpaid");
        appointment.setServices(selectedServices); // üî• l∆∞u danh s√°ch d·ªãch v·ª•

        System.out.println("üöÄ G·ªçi addAppointment()");
        appointmentService.addAppointment(appointment);
        System.out.println("‚úÖ G·ªçi xong addAppointment()");
        System.out.println("üü¢ [DEBUG] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω t·∫°o appointment");
        System.out.println("T√™n: " + name);
        System.out.println("SƒêT: " + phone);
        System.out.println("ƒê·ªãa ch·ªâ: " + address);
        System.out.println("Chuy√™n vi√™n: " + specialistCode);
        System.out.println("Ng√†y: " + dateStr);
        System.out.println("Gi·ªù: " + timeStr);
        System.out.println("D·ªãch v·ª• (IDs): " + serviceIds);

        Object customerIdObj = session.getAttribute("customerId");
        if (customerIdObj == null) {
            System.out.println("‚ùå [L·ªñI] Ch∆∞a ƒëƒÉng nh·∫≠p (customerId null)");
            return "redirect:/login";
        }



        return "redirect:/history";
    }

    // Hi·ªÉn th·ªã l·ªãch s·ª≠ ƒë·∫∑t l·ªãch


    // ƒê√°nh d·∫•u ƒë√£ thanh to√°n
    @GetMapping("/pay/{id}")
    public String markAsPaid(@PathVariable Long id) {
        Appointment appointment = appointmentService.getAppointmentById(id);
        appointment.setStatus("Paid");
        appointmentService.updateAppointment(id, appointment);
        return "redirect:/history";
    }
}
